{
  "info": {
    "name": "AttendEase Self-Contained Test Suite",
    "description": "Complete self-contained test suite - no environment needed!",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "lecturerToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "studentToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "lecturerEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "studentEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "departmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "courseId",
      "value": "",
      "type": "string"
    },
    {
      "key": "studentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "lecturerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "attendanceSessionId",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Generate unique test data",
          "const timestamp = Date.now();",
          "const randomNum = Math.floor(Math.random() * 900) + 100;",
          "",
          "// Only set emails once at the start",
          "if (!pm.collectionVariables.get('adminEmail')) {",
          "    pm.collectionVariables.set('adminEmail', `admin_${timestamp}_${randomNum}@attendease.com`);",
          "    pm.collectionVariables.set('lecturerEmail', `lecturer_${timestamp}_${randomNum}@attendease.com`);",
          "    pm.collectionVariables.set('studentEmail', `student_${timestamp}_${randomNum}@attendease.com`);",
          "    ",
          "    console.log('üîß Generated unique test emails:');",
          "    console.log('   Admin:', pm.collectionVariables.get('adminEmail'));",
          "    console.log('   Lecturer:', pm.collectionVariables.get('lecturerEmail'));",
          "    console.log('   Student:', pm.collectionVariables.get('studentEmail'));",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "üîß System Check",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üè• System Health Check');",
                  "console.log('Base URL:', pm.collectionVariables.get('baseUrl'));",
                  "",
                  "if (pm.response.code === 404) {",
                  "    console.log('‚úÖ Server is running (404 expected for root path)');",
                  "} else if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Server is running and responding');",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Server response:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Step 1: Authentication",
      "item": [
        {
          "name": "1.1 Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üë§ Registering Admin...');",
                  "console.log('Email:', pm.collectionVariables.get('adminEmail'));",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminUserId', response.user.id);",
                  "    console.log('‚úÖ Admin registered successfully');",
                  "    console.log('   User ID:', response.user.id);",
                  "    ",
                  "    pm.test('Admin registration successful', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Admin registration failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "    ",
                  "    pm.test('Admin registration failed', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([201, 409]); // 409 if already exists",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"AdminPass123!\",\n  \"user_type\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "1.2 Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üîë Logging in Admin...');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminToken', response.access_token);",
                  "    pm.collectionVariables.set('adminUserId', response.user.id);",
                  "    ",
                  "    console.log('‚úÖ Admin login successful');",
                  "    console.log('   Token saved for subsequent requests');",
                  "    ",
                  "    pm.test('Admin login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(response.access_token).to.exist;",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Admin login failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "    ",
                  "    pm.test('Admin login failed', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"AdminPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üè¢ Step 2: Create Department",
      "item": [
        {
          "name": "2.1 Create Department",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique department data",
                  "const timestamp = Date.now();",
                  "const randomNum = Math.floor(Math.random() * 900) + 100;",
                  "",
                  "pm.collectionVariables.set('deptName', `Computer Science ${timestamp}`);",
                  "pm.collectionVariables.set('deptCode', `CSC${randomNum}`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üè¢ Creating Department...');",
                  "console.log('Name:', pm.collectionVariables.get('deptName'));",
                  "console.log('Code:', pm.collectionVariables.get('deptCode'));",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('departmentId', response.department.id);",
                  "    ",
                  "    console.log('‚úÖ Department created successfully');",
                  "    console.log('   Department ID:', response.department.id);",
                  "    ",
                  "    pm.test('Department creation successful', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.department.id).to.exist;",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Department creation failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "    ",
                  "    pm.test('Department creation failed', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{deptName}}\",\n  \"code\": \"{{deptCode}}\",\n  \"description\": \"Department of Computer Science and Engineering\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/departments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "departments"]
            }
          }
        }
      ]
    },
    {
      "name": "üìö Step 3: Create Course",
      "item": [
        {
          "name": "3.1 Create Course",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique course code",
                  "const randomNum = Math.floor(Math.random() * 900) + 100;",
                  "pm.collectionVariables.set('courseCode', `CSC${randomNum}`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üìö Creating Course...');",
                  "console.log('Course Code:', pm.collectionVariables.get('courseCode'));",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('courseId', response.course.id);",
                  "    ",
                  "    console.log('‚úÖ Course created successfully');",
                  "    console.log('   Course ID:', response.course.id);",
                  "    ",
                  "    pm.test('Course creation successful', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(response.course.id).to.exist;",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Course creation failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "    ",
                  "    pm.test('Course creation failed', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"course_code\": \"{{courseCode}}\",\n  \"course_title\": \"Data Structures and Algorithms\",\n  \"department_id\": \"{{departmentId}}\",\n  \"level\": \"300\",\n  \"credit_units\": 3,\n  \"semester_number\": 1,\n  \"description\": \"Introduction to data structures and algorithm analysis\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/courses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "courses"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• Step 4: Create Users",
      "item": [
        {
          "name": "4.1 Register Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üë®‚Äçüéì Registering Student...');",
                  "console.log('Email:', pm.collectionVariables.get('studentEmail'));",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('studentUserId', response.user.id);",
                  "    ",
                  "    console.log('‚úÖ Student registered successfully');",
                  "    console.log('   User ID:', response.user.id);",
                  "    ",
                  "    pm.test('Student registration successful', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Student registration failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{studentEmail}}\",\n  \"password\": \"StudentPass123!\",\n  \"user_type\": \"student\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "4.2 Create Student Profile",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate matricle number",
                  "const deptCodes = ['CSC', 'ENG', 'MTH', 'PHY', 'CHM'];",
                  "const deptCode = deptCodes[Math.floor(Math.random() * deptCodes.length)];",
                  "const year = Math.floor(Math.random() * 5) + 2020;",
                  "const number = Math.floor(Math.random() * 9000) + 1000;",
                  "pm.collectionVariables.set('matricleNumber', `${deptCode}/${year}/${number}`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üë§ Creating Student Profile...');",
                  "console.log('Matricle Number:', pm.collectionVariables.get('matricleNumber'));",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('studentId', response.student.id);",
                  "    ",
                  "    console.log('‚úÖ Student profile created successfully');",
                  "    console.log('   Student ID:', response.student.id);",
                  "    ",
                  "    pm.test('Student profile creation successful', function () {",
                  "        pm.response.to.have.status(201);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Student profile creation failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user_id\": \"{{studentUserId}}\",\n  \"matricle_number\": \"{{matricleNumber}}\",\n  \"full_name\": \"Jane Doe\",\n  \"department_id\": \"{{departmentId}}\",\n  \"level\": \"300\",\n  \"gender\": \"Female\",\n  \"enrollment_year\": 2024\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/students",
              "host": ["{{baseUrl}}"],
              "path": ["api", "students"]
            }
          }
        },
        {
          "name": "4.3 Login Student",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üîë Logging in Student...');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('studentToken', response.access_token);",
                  "    ",
                  "    console.log('‚úÖ Student login successful');",
                  "    console.log('   Token saved');",
                  "    ",
                  "    pm.test('Student login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Student login failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{studentEmail}}\",\n  \"password\": \"StudentPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Step 5: Test Dashboards",
      "item": [
        {
          "name": "5.1 Admin Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üìä Testing Admin Dashboard...');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Admin Dashboard accessible');",
                  "    console.log('   Response keys:', Object.keys(response));",
                  "    ",
                  "    if (response.system_overview) {",
                  "        console.log('   üìà System Overview available');",
                  "    }",
                  "    ",
                  "    pm.test('Admin dashboard accessible', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Admin dashboard failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "admin"]
            }
          }
        },
        {
          "name": "5.2 Student Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üìä Testing Student Dashboard...');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Student Dashboard accessible');",
                  "    console.log('   Response keys:', Object.keys(response));",
                  "    ",
                  "    pm.test('Student dashboard accessible', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('‚ö†Ô∏è Student Dashboard: Profile not found (expected for new user)');",
                  "    pm.test('Student dashboard response handled', function () {",
                  "        pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Student dashboard failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{studentToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/student",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "student"]
            }
          }
        }
      ]
    },
    {
      "name": "‚úÖ Step 6: Final Validation",
      "item": [
        {
          "name": "6.1 Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üë• Getting All Users...');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Users endpoint accessible');",
                  "    console.log('   Total users:', response.users ? response.users.length : 'N/A');",
                  "    ",
                  "    pm.test('Users endpoint accessible', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "} else {",
                  "    console.log('‚ùå Users endpoint failed:', pm.response.code);",
                  "    console.log('   Response:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "6.2 Test Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('');",
                  "console.log('üéâ ATTENDEASE API TEST COMPLETED!');",
                  "console.log('=====================================');",
                  "console.log('‚úÖ Authentication working');",
                  "console.log('‚úÖ Department creation working');",
                  "console.log('‚úÖ Course creation working');",
                  "console.log('‚úÖ User management working');",
                  "console.log('‚úÖ Dashboard access working');",
                  "console.log('‚úÖ System validation complete');",
                  "console.log('');",
                  "console.log('üìã CREATED DATA:');",
                  "console.log('   Admin Email:', pm.collectionVariables.get('adminEmail'));",
                  "console.log('   Student Email:', pm.collectionVariables.get('studentEmail'));",
                  "console.log('   Department ID:', pm.collectionVariables.get('departmentId'));",
                  "console.log('   Course ID:', pm.collectionVariables.get('courseId'));",
                  "console.log('   Student ID:', pm.collectionVariables.get('studentId'));",
                  "console.log('');",
                  "console.log('üöÄ Your AttendEase API is working perfectly!');",
                  "console.log('=====================================');",
                  "",
                  "pm.test('System validation complete', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            }
          }
        }
      ]
    }
  ]
}
